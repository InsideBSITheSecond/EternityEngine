#pragma once

#include <iostream>

#include "PxPhysicsAPI.h"

namespace eve {

	using namespace physx;

	static PxDefaultErrorCallback gDefaultErrorCallback;
	static PxDefaultAllocator gDefaultAllocatorCallback;

	static PxDefaultAllocator		gAllocator;
	static PxDefaultErrorCallback	gErrorCallback;
	static PxFoundation*			gFoundation = NULL;
	static PxPhysics*				gPhysics	= NULL;
	static PxDefaultCpuDispatcher*	gDispatcher = NULL;
	static PxScene*					gScene		= NULL;
	static PxMaterial*				gMaterial	= NULL;
	static PxPvd*					gPvd        = NULL;

	static PxReal stackZ = 10.0f;

	class EvePhysx {
		public:
			EvePhysx();
			~EvePhysx();

			void createPhysxSimulation(bool interactive);
			void stepPhysics();

			PxRigidDynamic* createDynamic(const PxTransform& t, const PxGeometry& geometry, const PxVec3& velocity=PxVec3(0));
			void createStack(const PxTransform& t, PxU32 size, PxReal halfExtent);
		private:

	};
}